var Transform = require('stream').Transform,
    util = require('util');

util.inherits(LogStream, Transform);

function LogStream(options) {
    Transform.call(this, options);
}

LogStream.prototype._transform = function (message) {
    this.push(message + '\n');
};

LogStream.prototype.debug = function (message) {
    this.push(formatMessage('debug', Array.prototype.slice.call(arguments)));
};

LogStream.prototype.info = function (message) {
    this.push(formatMessage('info', Array.prototype.slice.call(arguments)));
};

LogStream.prototype.warn = function (message) {
    this.push(formatMessage('warn', Array.prototype.slice.call(arguments)));
};

LogStream.prototype.error = function (message) {
    this.push(formatMessage('error', Array.prototype.slice.call(arguments)));
};

module.exports = LogStream;

function formatMessage(level, args) {
    return args.reduce(function (message, arg) {
        return message + arg.toString() + ' ';
    }, new Date().toISOString() + ' - ' + level.toUpperCase() + ' - ') + '\n';
}