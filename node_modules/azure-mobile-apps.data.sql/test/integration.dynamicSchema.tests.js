var config = require('./infrastructure/config'),
    dynamicSchema = require('../dynamicSchema')(config),
    statements = require('../statements'),
    execute = require('../execute'),
    expect = require('chai').expect,

    table = { name: 'dynamicSchema' };

describe('azure-mobile-apps.data.sql.integration.dynamicSchema', function () {
    afterEach(function (done) {
        execute(config, { sql: 'drop table dbo.dynamicSchema' }).then(done, done);
    });

    it("creates basic table schema", function () {
        var item = { id: '1' };
        return dynamicSchema.execute(table, statements.insert(table, item), item)
            .then(function () {
                return execute(config, statements.getColumns(table));
            })
            .then(function (columns) {
                expect(columns).to.deep.equal([{ name: 'id', type: 'nvarchar' }]);
            });
    });

    it("creates table and schema", function () {
        var item = { id: '1', string: 'test', number: 1, boolean: true };
        return dynamicSchema.execute(table, statements.insert(table, item), item)
            .then(function () {
                return execute(config, statements.getColumns(table));
            })
            .then(function (columns) {
                expect(columns).to.deep.equal([
                    { name: 'id', type: 'nvarchar' },
                    { name: 'string', type: 'nvarchar' },
                    { name: 'number', type: 'float' },
                    { name: 'boolean', type: 'bit' }
                ]);
            });
    });

    it("updates schema", function () {
        var item = { id: '1', string: 'test', number: 1, boolean: true };
        return dynamicSchema.execute(table, statements.insert(table, { id: '1' }), { id: '1' })
            .then(function () {
                return dynamicSchema.execute(table, statements.update(table, item), item);
            })
            .then(function () {
                return execute(config, statements.getColumns(table));
            })
            .then(function (columns) {
                expect(columns).to.deep.equal([
                    { name: 'id', type: 'nvarchar' },
                    { name: 'string', type: 'nvarchar' },
                    { name: 'number', type: 'float' },
                    { name: 'boolean', type: 'bit' }
                ]);
            });
    });

    it("creates primary key constraint", function () {
        var item = { id: '1' };
        return dynamicSchema.execute(table, statements.insert(table, item), item)
            .then(function () {
                return execute(config, { sql: "SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = 'dynamicSchema'" });
            })
            .then(function (constraints) {
                expect(constraints.length).to.equal(1);
                expect(constraints[0].CONSTRAINT_NAME).to.equal('PK_dynamicSchema');
            });
    });
});
