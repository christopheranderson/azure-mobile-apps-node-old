var index = require('..'),
    execute = require('../execute'),
    queries = require('azure-mobile-apps.query'),
    config = require('./infrastructure/config'),
    expect = require('chai').expect;

describe('azure-mobile-apps.data.sql.integration', function () {
    var operations = index(config);

    beforeEach(function (done) {
        return operations.truncate(integrationTable).then(done);
    });

    it("basic connection test", function () {
        return execute(config, { sql: 'select * from integration', parameters: [] });
    });

    it("basic integration test", function () {
        return insert({ id: 1, string: 'test', bool: false, number: 1 })
            .then(read)
            .then(function (results) {
                expect(results).to.deep.equal([{ id: 1, string: 'test', bool: false, number: 1 }]);
                return update({ id: 1, string: 'test2', bool: true, number: 2  });
            })
            .then(read)
            .then(function (results) {
                expect(results).to.deep.equal([{ id: 1, string: 'test2', bool: true, number: 2 }]);
                return del(1);
            })
            .then(read)
            .then(function (results) {
                expect(results.length).to.equal(0);
            });
    });

    it("preserves existing values if unspecified", function () {
        return insert({ id: 1, string: 'test', bool: true, number: 1 })
            .then(function () {
                return update({ id: 1, string: 'test2' });
            })
            .then(read)
            .then(function (results) {
                expect(results).to.deep.equal([{ id: 1, string: 'test2', bool: true, number: 1 }]);
                return del(1);
            });
    });

    var integrationTable = { name: 'integration' };

    function read() {
        return operations.read(integrationTable, queries.create('integration'));
    }

    function insert(item) {
        return operations.insert(integrationTable, item);
    }

    function update(item) {
        return operations.update(integrationTable, item);
    }

    function del(id) {
        return operations.delete(integrationTable, id);
    }
});
