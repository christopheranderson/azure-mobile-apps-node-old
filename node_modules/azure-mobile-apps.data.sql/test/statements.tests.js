// there should be more tests here, but SQL tests can be fragile
// full coverage should be provided by integration tests

var expect = require('chai').expect;

describe('azure-mobile-apps.data.sql.statements', function () {
    describe('insert', function () {
        var insert = require('../statements/insert');

        it('generates simple statement and parameters', function () {
            var statement = insert({ name: 'table' }, { id: 'id', p1: 'value' });
            expect(statement.sql).to.equal('INSERT INTO [dbo].[table] ([id],[p1]) VALUES (@id,@p1); SELECT * FROM [dbo].[table] WHERE [id] = @id');
            expect(statement.parameters).to.deep.equal([{ name: 'id', value: 'id' }, { name: 'p1', value: 'value' }]);
        });
    });

    describe('update', function () {
        var update = require('../statements/update');

        it('generates simple statement and parameters', function () {
            var statement = update({ name: 'table' }, { id: 'id', p1: 'value' });
            expect(statement.sql).to.equal('UPDATE [dbo].[table] SET [p1] = @p1 WHERE [id] = @id ; SELECT * FROM [dbo].[table] WHERE [id] = @id');
            expect(statement.parameters).to.deep.equal([{ name: 'p1', value: 'value' }, { name: 'id', value: 'id' }]);
        });
    });

    describe('delete', function () {
        var del = require('../statements/delete');

        it('generates simple statement and parameters', function () {
            var statement = del({ name: 'table' }, 'id');
            expect(statement.sql).to.equal('DELETE FROM [dbo].[table] WHERE [id] = @id; SELECT @@rowcount AS __rowcount');
            expect(statement.parameters).to.deep.equal([{ name: 'id', value: 'id' }]);
        });
    });

    describe('updateSchema', function () {
        var updateSchema = require('../statements/updateSchema');

        it('generates simple statement', function () {
            var statement = updateSchema({ name: 'table' }, [{ name: 'id' }], { id: 1, text: 'test' });
            expect(statement.sql).to.equal('ALTER TABLE [dbo].[table] ADD [text] NVARCHAR(MAX) NULL')
        });
    });

    describe('createTable', function () {
        var createTable = require('../statements/createTable');

        it('generates create statement with string id', function () {
            var statement = createTable({ name: 'table' }, { id: '1', text: 'test' });
            expect(statement.sql).to.equal('CREATE TABLE [dbo].[table] ([id] NVARCHAR(900) NOT NULL,[text] NVARCHAR(MAX) NULL) ON [PRIMARY]; ALTER TABLE [dbo].[table] ADD CONSTRAINT PK_table PRIMARY KEY CLUSTERED (id) ON [PRIMARY]')
        });

        it('generates create statement with numeric id', function () {
            var statement = createTable({ name: 'table' }, { id: 1, text: 'test' });
            expect(statement.sql).to.equal('CREATE TABLE [dbo].[table] ([id] INT NOT NULL,[text] NVARCHAR(MAX) NULL) ON [PRIMARY]; ALTER TABLE [dbo].[table] ADD CONSTRAINT PK_table PRIMARY KEY CLUSTERED (id) ON [PRIMARY]')
        });

        it('generates create statement with string id if none is provided', function () {
            var statement = createTable({ name: 'table' }, { text: 'test' });
            expect(statement.sql).to.equal('CREATE TABLE [dbo].[table] ([id] NVARCHAR(900) NOT NULL,[text] NVARCHAR(MAX) NULL) ON [PRIMARY]; ALTER TABLE [dbo].[table] ADD CONSTRAINT PK_table PRIMARY KEY CLUSTERED (id) ON [PRIMARY]')
        });
    });
});
