
// ----------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// ----------------------------------------------------------------------------

var _ = require('underscore'),
    _str = require('underscore.string');

_.mixin(_str.exports());

(function (exports) {
    function sameArrayContents(array1, array2) {
        if (array1.length !== array2.length) {
            return false;
        } else {
            for (var i = 0; i < array1.length; i++) {
                if (array1[i] !== array2[i]) {
                    return false;
                }
            }
        }
        return true;
    }

    // This routine provides an equivalent of array.push(item) missing from JavaScript array.
    function arrayRemove(array, item) {
        var callback = isFunction(item) ? item : undefined;
        for (var index = 0; index < array.length; index++) {
            if (callback ? callback(array[index]) : (array[index] === item)) {
                array.splice(index, 1);
                return index;
            }
        }
        return -1;
    }

    function verbToOperation(verb) {
        if (typeof verb !== 'string' || verb.length === 0) {
            throw new Error('Verb must be a non empty string');
        }
        switch (verb.toUpperCase()) {
            case 'POST':
                return 'insert';
            case 'GET':
                return 'read';
            case 'PATCH':
                return 'update';
            case 'DELETE':
                return 'delete';
            default:
                return null;
        }
    }

    function isSystemColumnName(name) {
        return _.startsWith(name, '__');
    }

    // determines whether the specified value is of a supported type
    function isOfSupportedType(value) {
        if (value === null) {
            return true;
        }
        switch (exports.classof(value)) {
            case 'string':
            case 'number':
            case 'boolean':
            case 'date':
                return true;
            default:
                return false;
        }
    }

    // verifies that the specified value is of a supported type, and throws an error otherwise
    function validatePropertyType(propertyName, value) {
        if (!isOfSupportedType(value)) {
            throw new MobileServiceError(_.sprintf("The value of property '%s' is of type '%s' which is not a supported type.", propertyName, (typeof value)), ErrorCodes.BadInput);
        }
    }

    // perform any required type conversions to members of the object and
    // validate that no system properties are present.
    function performTypeConversions(item, tableMetadata) {
        for (var prop in item) {
            var value = item[prop];
            // attempt to convert date strings to actual
            // Date values
            if (prop !== 'id' && isString(value)) {
                var date = convertDate(value);
                if (date) {
                    item[prop] = date;
                }
                else if (tableMetadata.hasBinaryColumn(prop)) {
                    item[prop] = new Buffer(value, 'base64');
                }
            }
        }
    }

    function isStarSystemProperty(systemProperties) {
        systemProperties = Array.isArray(systemProperties) ? systemProperties : [systemProperties];
        return systemProperties.length === 1 && isString(systemProperties[0]) && systemProperties[0].trim() === "*";
    }

    function getSystemProperty(name) {
        name = name.toLowerCase();
        return _.find(supportedSystemProperties, function (property) {
            return property.name.toLowerCase() === name;
        });
    }

    function validateAndNormalizeSystemProperties(systemProperties) {
        if (!systemProperties) {
            return [];
        }

        var normalizedSystemProperties = [];

        // Ensure we have an array
        systemProperties = isArray(systemProperties) ? systemProperties : [systemProperties];

        // Check for the '*' (all system properties) value
        if (isStarSystemProperty(systemProperties)) {
            normalizedSystemProperties = supportedSystemProperties.map(function (property) {
                return property.name;
            });
        }
        else {
            // otherwise, validate each individual system property
            _.each(systemProperties, function (systemProperty) {
                var original = systemProperty,
                    isKnownProperty = false;

                if (isString(systemProperty)) {
                    // remove any whitespace and make all lower case
                    systemProperty = systemProperty.trim();
                    if (systemProperty === '') {
                        return;
                    }

                    // accept both with and without the '__' prefix
                    if (isSystemColumnName(systemProperty)) {
                        systemProperty = systemProperty.substr(2);
                    }

                    var supportedSystemProperty = getSystemProperty(systemProperty);
                    if (supportedSystemProperty) {
                        normalizedSystemProperties.push(supportedSystemProperty.name);
                        isKnownProperty = true;
                    }
                }

                if (!isKnownProperty) {
                    throw new MobileServiceError(_.sprintf("The value '%s' is not a supported system property.", original), ErrorCodes.BadInput);
                }
            });
        }

        return normalizedSystemProperties;
    }

    function getContentType(req) {
        var contentType = req.headers['content-type'] || '';
        return contentType.split(';')[0];
    }

    // creates a lazy property on the target using the name and
    // value provider function specified.
    function createLazyProperty(target, name, valueProvider) {
        var value;

        Object.defineProperty(target, name, {
            get: function () {
                if (value === undefined) {
                    // if we haven't accessed the value yet, get it
                    // and cache it
                    value = valueProvider();
                }
                return value;
            }
        });
    }

    function parseNumber(numberText, identifier) {
        var number = parseInt(numberText, 10);
        if (isNaN(number) || (number != numberText)) {
            throw new exports.MobileServiceError(_.sprintf("The value specified for '%s' must be a number.", identifier), exports.ErrorCodes.BadInput);
        }
        return number;
    }

    // for the specified array of objects, plucks a key value from
    // each object in the array, and adds it as a property to the map.
    function toLookup(array, map, keySelector) {
        if (!Array.isArray(array)) {
            throw Error('First parameter must be an array');
        }
        array.forEach(function (item) {
            var key = keySelector(item);
            map[key] = item;
        });
    }

    // Any code paths that serialize the response body to JSON
    // should use this version of stringify to ensure that all
    // byte arrays (Buffers in node.js) are serialized correctly.
    function stringify(itemToStringify) {
        return JSON.stringify(itemToStringify, function (item, value) {
            if (Buffer.isBuffer(value)) {
                value = value.toString('base64');
            }
            return value;
        });
    }

    var ErrorCodes = {
        BadInput: "BadInput",
        ScriptError: "ScriptError",
        ItemNotFound: "ItemNotFound",
        MethodNotAllowed: "MethodNotAllowed",
        MergeConflict: "MergeConflict",
        ItemSoftDeleted: "ItemSoftDeleted",
        Conflict: "Conflict"
    };

    // The system properties that are supported
    var supportedSystemProperties = [
        { name: 'createdAt', type: 'datetimeoffset' },
        { name: 'updatedAt', type: 'datetimeoffset' },
        { name: 'version', type: 'timestamp' },
        { name: 'deleted', type: 'bit' }
    ];

    // Column names of supported system properties and id column
    var supportedSystemColumns = supportedSystemProperties.map(systemPropertyToColumnName);
    supportedSystemColumns.id = 'id';

    function systemPropertyToColumnName(propertyName) {
        return '__' + propertyName;
    }

    function base64UrlEncode(value) {
        return toUrlEncodedBase64FromBase64(new Buffer(value).toString('base64'));
    }

    function toUrlEncodedBase64FromBase64(value) {
        return _.rtrim(value, '=')
            .replace(/\+/g, '-')
            .replace(/\//g, '_');
    }

    function base64UrlDecode(encoded) {
        // use Buffer to decode
        var buf = new Buffer(toBase64FromUrlEncodedBase64(encoded), 'base64');
        return buf.toString();
    }

    function toBase64FromUrlEncodedBase64(base64UrlString) {
        var base64String = base64UrlString
        .replace(/\-/g, '+')
        .replace(/_/g, '/');
        return padBase64String(base64String);
    }

    function normalizeVersion(version) {
        var buffer = Buffer.isBuffer(version) ? version : new Buffer(version, 'base64');
        // if version is not 8 bytes, its not sql server rowversion
        if (buffer.length !== 8 ||
            // if version is not valid base64 string
            (_.isString(version) && buffer.toString('base64') !== version)) {
            // reset version to 0000
            version = '0A=';
        }
        return version;
    }

    function padBase64String(encoded) {
        // Pad with trailing '='s
        switch (encoded.length % 4) {
            case 0:
                return encoded; // No pad chars in this case
            case 2:
                encoded += "==";
                return encoded; // Two pad chars
            case 3:
                encoded += "=";
                return encoded; // One pad char
            default:
                throw new Error("The authentication token contains illegal base64 url string.");
        }
    }

    function ensureParamNotNull(value, name) {
        if (!value) {
            throw new Error(_.sprintf("Parameter '%s' cannot be null or undefined.", name));
        }
	}

    // TEMP: This is only necessary during the migration to site extensions.
    // Once migration is complete, the 'scripts' format will no longer be supported and this function can be removed.
    function getScriptsDirName(configPath) {
        return _str.endsWith(configPath, 'config') ? 'scripts' : 'service';
    }

    exports.ensureParamNotNull = ensureParamNotNull;
    exports.getSystemProperty = getSystemProperty;
    exports.supportedSystemProperties = supportedSystemProperties;
    exports.supportedSystemColumns = supportedSystemColumns;
    exports.stringify = stringify;
    exports.sameArrayContents = sameArrayContents;
    exports.arrayRemove = arrayRemove;
    exports.verbToOperation = verbToOperation;
    exports.isSystemColumnName = isSystemColumnName;
    exports.isOfSupportedType = isOfSupportedType;
    exports.validatePropertyType = validatePropertyType;
    exports.performTypeConversions = performTypeConversions;
    exports.isStarSystemProperty = isStarSystemProperty;
    exports.validateAndNormalizeSystemProperties = validateAndNormalizeSystemProperties;
    exports.ErrorCodes = ErrorCodes;
    exports.createLazyProperty = createLazyProperty;
    exports.toLookup = toLookup;
    exports.getContentType = getContentType;
    exports.systemPropertyToColumnName = systemPropertyToColumnName;
    exports.base64UrlEncode = base64UrlEncode;
    exports.base64UrlDecode = base64UrlDecode;
    exports.toBase64FromUrlEncodedBase64 = toBase64FromUrlEncodedBase64;
    exports.toUrlEncodedBase64FromBase64 = toUrlEncodedBase64FromBase64;
    exports.normalizeVersion = normalizeVersion;
    exports.getScriptsDirName = getScriptsDirName;

})(typeof exports === 'undefined' ? (this.core = {}) : exports);
