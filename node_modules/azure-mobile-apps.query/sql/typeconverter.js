// ----------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// ----------------------------------------------------------------------------

var core = require('../core'),
    _ = require('underscore'),
    ExpressionVisitor = require('../query/ExpressionVisitor');

require('../query/expressions');

var ctor = function (tableMetadata) {
    this.tableMetadata = tableMetadata;
};

var instanceMembers = {

    visitBinary: function (expr) {
        var left = expr.left ? this.visit(expr.left) : null;
        var right = expr.right ? this.visit(expr.right) : null;

        if (this._isStringConstant(left) && this._isBinaryMemberAccess(right)) {
            left.value = new Buffer(left.value, 'base64');
        }
        else if (this._isStringConstant(right) && this._isBinaryMemberAccess(left)) {
            right.value = new Buffer(right.value, 'base64');
        }

        if (left != expr.left || right != expr.right) {
            return new BinaryExpression(left, right, expr.expressionType);
        }

        return expr;
    },

    _isStringConstant: function(expr) {
        return expr &&
               expr.expressionType === 'Constant' &&
               core.isString(expr.value);
    },

    _isBinaryMemberAccess: function (expr) {
        return expr &&
               expr.expressionType === 'MemberAccess' &&
               core.isString(expr.member) &&
               _.contains(this.tableMetadata.binaryColumns, expr.member.toLowerCase());
    }
};

var TypeConverter = module.exports = core.deriveClass(ExpressionVisitor, ctor, instanceMembers);

TypeConverter.convertTypes = function (expr, tableMetadata) {
    return new TypeConverter(tableMetadata).visit(expr);
};
