require('../query/expressions');
require('../query/expressionvisitor');

var SqlFormatter = require('../sql/SqlFormatter'),
    core = require('../core.js'),
    equal = require('assert').equal;

describe('azure-mobile-apps.query.sql.SqlFormatter', function () {
    // Bug#639772
    it("query with skip no top", function () {
        var queryDescription = {
            table: 'books',
            filters: "(type eq 'psychology') and (price lt 25.00)",
            skip: 4
        };
        var expectedSql = "SELECT * FROM (SELECT ROW_NUMBER() OVER (ORDER BY [id]) AS [ROW_NUMBER], * FROM [testapp].[books] WHERE (([type] = ?) AND ([price] < ?))) AS [t1] WHERE [t1].[ROW_NUMBER] BETWEEN 4 + 1 AND 4 + 9007199254740992 ORDER BY [t1].[ROW_NUMBER]";

        verifySqlFormatting(queryDescription, expectedSql);
    });

    it("query on constants", function () {
        var queryDescription = {
            table: 'books',
            filters: "(true eq null) and false",
        };
        var expectedSql = "SELECT * FROM [testapp].[books] WHERE ((? IS NULL) AND (? = ?))";

        var formatter = verifySqlFormatting(queryDescription, expectedSql);
        equal(formatter.parameters[0].value, true);
        equal(formatter.parameters[1].value, false);
        equal(formatter.parameters[2].value, true);
    });

    it("query on datetime field", function () {
        var queryDescription = {
            table: 'books',
            filters: "datetime eq 1",
        };
        var expectedSql = "SELECT * FROM [testapp].[books] WHERE ([datetime] = ?)";

        var formatter = verifySqlFormatting(queryDescription, expectedSql);
        equal(formatter.parameters[0].value, 1);
    });

    it("query with no select but includeDeleted", function () {
        var queryDescription = {
            table: 'checkins',
            includeDeleted: true
        };

        var formatter = new SqlFormatter('zumo_app', { hasStringId: true, supportsSoftDelete: true });
        formatter.format(queryDescription);
        equal(formatter.sql, "SELECT * FROM [zumo_app].[checkins]");
    });

    it("query with no select but without includeDeleted", function () {
        var queryDescription = {
            table: 'checkins'
        };

        var formatter = new SqlFormatter('zumo_app', { hasStringId: true, supportsSoftDelete: true });
        formatter.format(queryDescription);
        equal(formatter.sql, "SELECT * FROM [zumo_app].[checkins] WHERE ([__deleted] = ?)");
    });

    it("query with top, skip and no select but without includeDeleted", function () {
        var queryDescription = {
            table: 'checkins',
            skip: 4,
            take: 4
        };

        var formatter = new SqlFormatter('zumo_app', { hasStringId: true, supportsSoftDelete: true });
        formatter.format(queryDescription);
        equal(formatter.sql, "SELECT * FROM (SELECT ROW_NUMBER() OVER (ORDER BY [id]) AS [ROW_NUMBER], * FROM [zumo_app].[checkins] WHERE ([__deleted] = ?)) AS [t1] WHERE [t1].[ROW_NUMBER] BETWEEN 4 + 1 AND 4 + 4 ORDER BY [t1].[ROW_NUMBER]");
    });

    it("query with no select but system properties", function () {
        var queryDescription = {
            table: 'checkins',
            systemProperties: ['__version']
        };

        var formatter = new SqlFormatter('zumo_app', { hasStringId: true });
        formatter.format(queryDescription);
        equal(formatter.sql, "SELECT * FROM [zumo_app].[checkins]");
    });

    it("query with select and system properties", function () {
        var queryDescription = {
            table: 'checkins',
            selections: 'id',
            systemProperties: ['version', 'createdAt']
        };

        var formatter = new SqlFormatter('zumo_app', { hasStringId: true });
        formatter.format(queryDescription);
        equal(formatter.sql, "SELECT [id], [__version], [__createdAt] FROM [zumo_app].[checkins]");
    });

    it("inline count with paging and filter", function () {
        var queryDescription = {
            table: 'books',
            filters: "(type eq 'psychology') and (price lt 25.00)",
            selections: 'title,type,price',
            skip: 4,
            take: 4,
            inlineCount: 'allpages'
        };
        var expectedSql = "SELECT [t1].[ROW_NUMBER], [t1].[title], [t1].[type], [t1].[price] FROM (SELECT ROW_NUMBER() OVER (ORDER BY [id]) AS [ROW_NUMBER], [title], [type], [price] FROM [testapp].[books] WHERE (([type] = ?) AND ([price] < ?))) AS [t1] WHERE [t1].[ROW_NUMBER] BETWEEN 4 + 1 AND 4 + 4 ORDER BY [t1].[ROW_NUMBER]; SELECT COUNT(*) AS [count] FROM [testapp].[books] WHERE (([type] = ?) AND ([price] < ?))";

        var formatter = verifySqlFormatting(queryDescription, expectedSql);

        equal(formatter.parameters[0].value, 'psychology');
        equal(formatter.parameters[1].value, 25);
        equal(formatter.parameters[2].value, 'psychology');
        equal(formatter.parameters[3].value, 25);
    });

    it("basic formatter test", function () {
        var queryDescription = {
            table: 'checkins',
            filters: "(user eq 'mathewc')"
        };

        var formatter = new SqlFormatter('zumo_app', { idType: "number", binaryColumns: [] });
        formatter.format(queryDescription);
        equal(formatter.sql, "SELECT * FROM [zumo_app].[checkins] WHERE ([user] = ?)");
    });

    it("advanced formatter tests", function () {
        var queryDescription = {
            table: 'products',
            filters: "((ProductName ne 'Doritos') or (UnitPrice lt 5.00))"
        };
        var formatter = new SqlFormatter('testapp', { idType: "number", binaryColumns: [] });
        formatter.format(queryDescription);
        equal(formatter.sql, "SELECT * FROM [testapp].[products] WHERE (([ProductName] != ?) OR ([UnitPrice] < ?))");

        queryDescription = {
            table: 'products',
            filters: "((ProductName ne 'Doritos') or (UnitPrice lt 5.00))",
            selections: 'ProductID, ProductName',
            ordering: 'UnitPrice asc',
            resultLimit: 1000
        };
        formatter.format(queryDescription);
        equal(formatter.sql, "SELECT TOP 1000 [ProductID], [ProductName] FROM [testapp].[products] WHERE (([ProductName] != ?) OR ([UnitPrice] < ?)) ORDER BY [UnitPrice]");

        queryDescription.take = 5;
        formatter.format(queryDescription);
        equal(formatter.sql, "SELECT TOP 5 [ProductID], [ProductName] FROM [testapp].[products] WHERE (([ProductName] != ?) OR ([UnitPrice] < ?)) ORDER BY [UnitPrice]");
    });

    it("test ordering", function () {
        var queryDescription = {
            table: 'products',
            filters: "((ProductName ne 'Doritos') or (UnitPrice lt 5.00))",
            ordering: "UnitPrice desc"
        };
        var formatter = new SqlFormatter('testapp', { idType: "number", binaryColumns: [] });
        formatter.format(queryDescription);
        equal(formatter.sql, "SELECT * FROM [testapp].[products] WHERE (([ProductName] != ?) OR ([UnitPrice] < ?)) ORDER BY [UnitPrice] DESC");

        // verify parameters
        equal(formatter.parameters.length, 2);
        equal(formatter.parameters[0].value, 'Doritos');
        equal(formatter.parameters[1].value, 5.00);
    });

    it("test multipart ordering", function () {
        var queryDescription = {
            table: 'products',
            ordering: "UnitPrice desc, Category, ProductName"
        };
        var formatter = new SqlFormatter('testapp', { idType: "number", binaryColumns: [] });
        formatter.format(queryDescription);
        equal(formatter.sql, "SELECT * FROM [testapp].[products] ORDER BY [UnitPrice] DESC, [Category], [ProductName]");
    });

    it("simple multipart query", function () {
        var queryDescription = {
            table: 'products',
            filters: "name eq 'Doritos'",
            ordering: "price",
            take: 100
        };
        verifySqlFormatting(queryDescription, "SELECT TOP 100 * FROM [testapp].[products] WHERE ([name] = ?) ORDER BY [price]");
    });

    it("orderby", function () {
        var queryDescription = {
            table: 'products',
            ordering: 'price'
        };
        verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[products] ORDER BY [price]");
    });

    it("orderby ascending descending", function () {
        var queryDescription = {
            table: 'products',
            ordering: 'price asc'
        };
        verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[products] ORDER BY [price]");

        queryDescription.ordering = 'price desc';
        verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[products] ORDER BY [price] DESC");
    });

    it("equality operator", function () {
        var queryDescription = {
            table: 'products',
            filters: "name eq 'Doritos'"
        };
        verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[products] WHERE ([name] = ?)");
    });

    it("not equal operator", function () {
        var queryDescription = {
            table: 'products',
            filters: "name ne 'Doritos'"
        };
        verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[products] WHERE ([name] != ?)");
    });

    it("greater than operator", function () {
        var queryDescription = {
            table: 'products',
            filters: "price gt 5.00"
        };
        verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[products] WHERE ([price] > ?)");
    });

    it("greater than equal operator", function () {
        var queryDescription = {
            table: 'products',
            filters: "price ge 5.00"
        };
        verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[products] WHERE ([price] >= ?)");
    });

    it("less than operator", function () {
        var queryDescription = {
            table: 'products',
            filters: "price lt 5.00"
        };
        verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[products] WHERE ([price] < ?)");
    });

    it("less than equal operator", function () {
        var queryDescription = {
            table: 'products',
            filters: "price le 5.00"
        };
        verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[products] WHERE ([price] <= ?)");
    });

    it("or operator", function () {
        var queryDescription = {
            table: 'products',
            filters: "price le 5.00"
        };
        verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[products] WHERE ([price] <= ?)");
    });

    it("negative numbers", function () {
        var queryDescription = {
            table: 'products',
            filters: "price eq 5.00 or price eq 10.00"
        };
        verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[products] WHERE (([price] = ?) OR ([price] = ?))");
    });

    it("and operator", function () {
        var queryDescription = {
            table: 'products',
            filters: "price gt 5.00 and price lt 10.00"
        };
        verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[products] WHERE (([price] > ?) AND ([price] < ?))");
    });

    it("negation operator", function () {
        var queryDescription = {
            table: 'products'
        };

        // boolean odata functions
        queryDescription.filters = "not(substringof('foo', name))";
        verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[products] WHERE NOT ([name] LIKE ('%' + ? + '%'))");

        // inequality
        queryDescription.filters = "not(price lt 5.00)";
        verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[products] WHERE NOT ([price] < ?)");

        // simple not requiring no conversion
        queryDescription.filters = "not(price eq 5.00)";
        verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[products] WHERE NOT ([price] = ?)");

        // non boolean expression
        queryDescription.filters = "not(discontinued)";
        var formatter = verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[products] WHERE NOT ([discontinued] = ?)");
        equal((formatter.parameters[0].value === true), true);

        // nested not
        queryDescription.filters = "not(not(discontinued))";
        verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[products] WHERE NOT NOT ([discontinued] = ?)");
    });

    it("subtraction", function () {
        var queryDescription = {
            table: 'products',
            filters: "price sub 1.00 lt 5.00"
        };
        verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[products] WHERE (([price] - ?) < ?)");
    });

    // verifies that bit expressions are translated to boolean expressions when required
    it("bit to boolean conversion", function () {
        var queryDescription = {
            table: 'products',
            filters: 'not(discontinued)'
        };

        var formatter = verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[products] WHERE NOT ([discontinued] = ?)");
        equal((formatter.parameters[0].value === true), true);

        queryDescription.filters = 'discontinued';
        formatter = verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[products] WHERE ([discontinued] = ?)");
        equal((formatter.parameters[0].value === true), true);

        queryDescription.table = 'person';
        queryDescription.filters = 'likesBeer and isMale';
        formatter = verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[person] WHERE (([likesBeer] = ?) AND ([isMale] = ?))");
        equal((formatter.parameters[0].value === true), true);
        equal((formatter.parameters[1].value === true), true);

        queryDescription.table = 'person';
        queryDescription.filters = 'not(isUgly) and (likesBeer or isMale)';
        formatter = verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[person] WHERE (NOT ([isUgly] = ?) AND (([likesBeer] = ?) OR ([isMale] = ?)))");
    });

    // verifies that when any boolean expression is compared to a bit literal (true/false)
    // the expression is rewritten to remove the comparison
    it("boolean comparison to bit", function () {
        var queryDescription = {
            table: 'products',
            filters: "substringof('foo', name) eq true"
        };
        verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[products] WHERE ([name] LIKE ('%' + ? + '%'))");

        queryDescription.filters = "substringof('foo', name) eq false";
        verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[products] WHERE NOT ([name] LIKE ('%' + ? + '%'))");

        queryDescription.filters = "true eq substringof('foo', name)";
        verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[products] WHERE ([name] LIKE ('%' + ? + '%'))");

        queryDescription.filters = "false eq substringof('foo', name)";
        verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[products] WHERE NOT ([name] LIKE ('%' + ? + '%'))");

        queryDescription.table = 'person';
        queryDescription.filters = '(likesBeer or isMale) eq true';
        verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[person] WHERE (([likesBeer] = ?) OR ([isMale] = ?))");

        queryDescription.table = 'person';
        queryDescription.filters = 'false eq (likesBeer or isMale)';
        verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[person] WHERE NOT (([likesBeer] = ?) OR ([isMale] = ?))");
    });

    it("mixed bit boolean conversions", function () {
        var queryDescription = {
            table: 'person',
            filters: "(endswith(name, 'foo') eq true) and (likesBeer)"
        };
        verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[person] WHERE (([name] LIKE ('%' + ?)) AND ([likesBeer] = ?))");
    });

    it("addition", function () {
        var queryDescription = {
            table: 'products',
            filters: "price add 1.00 lt 5.00"
        };
        verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[products] WHERE (([price] + ?) < ?)");
    });

    it("multiplication", function () {
        var queryDescription = {
            table: 'products',
            filters: "price mul 1.25 lt 5.00"
        };
        verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[products] WHERE (([price] * ?) < ?)");
    });

    it("division", function () {
        var queryDescription = {
            table: 'products',
            filters: "price div 1.25 lt 5.00"
        };
        verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[products] WHERE (([price] / ?) < ?)");
    });

    // Bug#599392
    it("modulo", function () {
        var queryDescription = {
            table: 'products',
            filters: "price mod 1.25 lt 5.00"
        };
        verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[products] WHERE ((CONVERT(numeric, [price]) % ?) < ?)");
    });

    it("grouping", function () {
        var queryDescription = {
            table: 'products',
            filters: "((name ne 'Doritos') or (price lt 5.00))"
        };
        verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[products] WHERE (([name] != ?) OR ([price] < ?))");
    });

    it("null literal equality", function () {
        var queryDescription = {
            table: 'products',
            filters: "name eq null"
        };
        verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[products] WHERE ([name] IS NULL)");
    });

    it("null literal inequality", function () {
        var queryDescription = {
            table: 'products',
            filters: "name ne null"
        };
        verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[products] WHERE ([name] IS NOT NULL)");
    });

    it("string length", function () {
        var queryDescription = {
            table: 'products',
            filters: "length(name) gt 5"
        };
        verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[products] WHERE ((LEN([name] + 'X') - 1) > ?)");

        // pass a string concat expression into length
        queryDescription = {
            table: 'products',
            filters: "length(concat(name, category)) gt 5"
        };
        verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[products] WHERE ((LEN((CONVERT(NVARCHAR(MAX), [name]) + [category]) + 'X') - 1) > ?)");
    });

    it("string startswith", function () {
        var queryDescription = {
            table: 'products',
            filters: "startswith(name, 'Abc')"
        };
        var formatter = verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[products] WHERE ([name] LIKE (? + '%'))");
        equal(formatter.parameters[0].value, 'Abc');
    });

    it("string endswith", function () {
        var queryDescription = {
            table: 'products',
            filters: "endswith(name, 'Abc')"
        };
        verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[products] WHERE ([name] LIKE ('%' + ?))");
    });

    it("string substringof", function () {
        var queryDescription = {
            table: 'products',
            filters: "substringof('Abc', name)"
        };
        var formatter = verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[products] WHERE ([name] LIKE ('%' + ? + '%'))");
        equal(formatter.parameters[0].value, 'Abc');
    });

    it("string indexof", function () {
        var queryDescription = {
            table: 'products',
            filters: "indexof(name, 'Abc') eq 5"
        };
        var formatter = verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[products] WHERE ((PATINDEX('%' + ? + '%', [name]) - 1) = ?)");
        equal(formatter.parameters[0].value, 'Abc');
        equal(formatter.parameters[1].value, 5);
    });

    it("string concat", function () {
        var queryDescription = {
            table: 'customers',
            filters: "concat(concat(city, ', '), country) eq 'Berlin, Germany'"
        };
        var formatter = verifySqlFormatting(queryDescription,
            "SELECT * FROM [testapp].[customers] WHERE ((CONVERT(NVARCHAR(MAX), (CONVERT(NVARCHAR(MAX), [city]) + ?)) + [country]) = ?)");
        equal(formatter.parameters[0].value, ', ');
        equal(formatter.parameters[1].value, 'Berlin, Germany');
    });

    it("string replace", function () {
        var queryDescription = {
            table: 'products',
            filters: "replace(name, ' ', '') eq 'ApplePie'"
        };
        var formatter = verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[products] WHERE (REPLACE([name], ?, ?) = ?)");
        equal(formatter.parameters[0].value, ' ');
        equal(formatter.parameters[1].value, '');
        equal(formatter.parameters[2].value, 'ApplePie');
    });

    it("string substring", function () {
        // first overload not taking an explicit length - will return
        // the rest of the string
        var queryDescription = {
            table: 'books',
            filters: "substring(title, 1) eq 'he Rise and Fall of the Roman Empire'"
        };
        var formatter = verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[books] WHERE (SUBSTRING([title], ? + 1, LEN([title])) = ?)");
        equal(formatter.parameters[0].value, 1);
        equal(formatter.parameters[1].value, 'he Rise and Fall of the Roman Empire');

        // second overload taking a length
        queryDescription.filters = "substring(title, 1, 10) eq 'he Rise and Fall of the Roman Empire'";
        formatter = verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[books] WHERE (SUBSTRING([title], ? + 1, ?) = ?)");
        equal(formatter.parameters[0].value, 1);
        equal(formatter.parameters[1].value, 10);
        equal(formatter.parameters[2].value, 'he Rise and Fall of the Roman Empire');
    });

    it("string trim", function () {
        var queryDescription = {
            table: 'products',
            filters: "trim(name) eq 'foobar'"
        };
        verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[products] WHERE (LTRIM(RTRIM([name])) = ?)");
    });

    it("string tolower", function () {
        var queryDescription = {
            table: 'products',
            filters: "tolower(name) eq 'tasty treats'"
        };
        verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[products] WHERE (LOWER([name]) = ?)");
    });

    it("string toupper", function () {
        var queryDescription = {
            table: 'products',
            filters: "toupper(name) eq 'TASTY TREATS'"
        };
        verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[products] WHERE (UPPER([name]) = ?)");
    });

    it("string concat", function () {
        var queryDescription = {
            table: 'products',
            filters: "concat(name, 'Bar') eq 'FooBar'"
        };
        var formatter = verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[products] WHERE ((CONVERT(NVARCHAR(MAX), [name]) + ?) = ?)");
        equal(formatter.parameters[0].value, 'Bar');
        equal(formatter.parameters[1].value, 'FooBar');
    });

    it("date functions ", function () {
        var queryDescription = {
            table: 'checkins',
            filters: "day(checkinDate) lt 25"
        };
        var formatter = verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[checkins] WHERE (DAY([checkinDate]) < ?)");
        equal(formatter.parameters[0].value, 25);

        queryDescription.filters = "month(checkinDate) eq 8";
        formatter = verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[checkins] WHERE (MONTH([checkinDate]) = ?)");
        equal(formatter.parameters[0].value, 8);

        queryDescription.filters = "year(checkinDate) gt 1974";
        formatter = verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[checkins] WHERE (YEAR([checkinDate]) > ?)");
        equal(formatter.parameters[0].value, 1974);

        queryDescription.filters = "hour(checkinDate) gt 6";
        formatter = verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[checkins] WHERE (DATEPART(HOUR, [checkinDate]) > ?)");

        queryDescription.filters = "minute(checkinDate) eq 33";
        formatter = verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[checkins] WHERE (DATEPART(MINUTE, [checkinDate]) = ?)");

        queryDescription.filters = "second(checkinDate) lt 30";
        formatter = verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[checkins] WHERE (DATEPART(SECOND, [checkinDate]) < ?)");
    });

    it("math functions", function () {
        var queryDescription = {
            table: 'books',
            filters: "floor(price) lt 77"
        };
        var formatter = verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[books] WHERE (FLOOR([price]) < ?)");
        equal(formatter.parameters[0].value, 77);

        queryDescription.filters = "ceiling(price) eq 8";
        formatter = verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[books] WHERE (CEILING([price]) = ?)");
        equal(formatter.parameters[0].value, 8);

        queryDescription.filters = "round(price) gt 19.00";
        formatter = verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[books] WHERE (ROUND([price], 0) > ?)");
        equal(formatter.parameters[0].value, 19.00);
    });

    it("simple paging query", function () {
        var queryDescription = {
            table: 'books',
            skip: 4,
            take: 4
        };
        var expectedSql = "SELECT * FROM (SELECT ROW_NUMBER() OVER (ORDER BY [id]) AS [ROW_NUMBER], * FROM [testapp].[books] WHERE (1 = 1)) AS [t1] WHERE [t1].[ROW_NUMBER] BETWEEN 4 + 1 AND 4 + 4 ORDER BY [t1].[ROW_NUMBER]";
        verifySqlFormatting(queryDescription, expectedSql);
    });

    it("paging query with filter and select", function () {
        var queryDescription = {
            table: 'books',
            filters: "type eq 'psychology'",
            selections: 'title,type,price',
            skip: 4,
            take: 4
        };
        var expectedSql = "SELECT [t1].[ROW_NUMBER], [t1].[title], [t1].[type], [t1].[price] FROM (SELECT ROW_NUMBER() OVER (ORDER BY [id]) AS [ROW_NUMBER], [title], [type], [price] FROM [testapp].[books] WHERE ([type] = ?)) AS [t1] WHERE [t1].[ROW_NUMBER] BETWEEN 4 + 1 AND 4 + 4 ORDER BY [t1].[ROW_NUMBER]";
        verifySqlFormatting(queryDescription, expectedSql);
    });

    it("paging query with filter and select and ordering", function () {
        var queryDescription = {
            table: 'books',
            filters: "type eq 'psychology'",
            selections: 'title,type,price',
            ordering: 'price desc',
            skip: 4,
            take: 4
        };
        var expectedSql = "SELECT [t1].[ROW_NUMBER], [t1].[title], [t1].[type], [t1].[price] FROM (SELECT ROW_NUMBER() OVER (ORDER BY [price] DESC) AS [ROW_NUMBER], [title], [type], [price] FROM [testapp].[books] WHERE ([type] = ?)) AS [t1] WHERE [t1].[ROW_NUMBER] BETWEEN 4 + 1 AND 4 + 4 ORDER BY [t1].[ROW_NUMBER]";
        verifySqlFormatting(queryDescription, expectedSql);
    });

    it("datetime expression", function () {
        var queryDescription = {
            table: 'checkins',
            filters: "checkinDate lt datetime'2000-12-12T12:00:00Z'"
        };
        var formatter = verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[checkins] WHERE ([checkinDate] < ?)");

        var value = formatter.parameters[0].value;
        equal(core.isDate(value), true);

        // try a parse failure case
        var expectedExceptionCaught = false;
        try {
            queryDescription.filters = "checkinDate lt datetime'2000x12-12blah2:00'";
            verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[checkins] WHERE ([checkinDate] < ?)");
        }
        catch (e) {
            expectedExceptionCaught = true;
            equal(e.message, "Invalid 'datetime' type creation expression (at index 23)");
        }
        equal(expectedExceptionCaught, true);
    });

    it("datetimeoffset expression", function () {
        var queryDescription = {
            table: 'checkins',
            filters: "checkinDate lt datetimeoffset'2000-12-12T04:00:00.0000000-08:00'"
        };
        var formatter = verifySqlFormatting(queryDescription, "SELECT * FROM [testapp].[checkins] WHERE ([checkinDate] < ?)");

        var value = formatter.parameters[0].value;
        equal(core.isDate(value), true);
        equal(value.toISOString(), '2000-12-12T12:00:00.000Z');
    });

    it("parse multiple quotes", function () {
        var queryDescription = {
            table: 'products',
            filters: "description eq 'lots of qu''ote''''s i''n he''r''e!'"
        };
        var formatter = new SqlFormatter('testapp', { idType: "number", binaryColumns: [] });
        formatter.format(queryDescription);
        equal(formatter.sql, "SELECT * FROM [testapp].[products] WHERE ([description] = ?)");
        equal(formatter.parameters[0].value, "lots of qu'ote''s i'n he'r'e!");
    });

    it("verify function arguments", function () {
        var testCases = [
            // date functions
            { filters: "day(a, b, c)", expectedParamCount: 1 },
            { filters: "day()", expectedParamCount: 1 },
            { filters: "month(a, b, c)", expectedParamCount: 1 },
            { filters: "month()", expectedParamCount: 1 },
            { filters: "year(a, b, c)", expectedParamCount: 1 },
            { filters: "year()", expectedParamCount: 1 },
            { filters: "hour()", expectedParamCount: 1 },
            { filters: "minute()", expectedParamCount: 1 },
            { filters: "second()", expectedParamCount: 1 },
            { filters: "floor(a, b, c)", expectedParamCount: 1 },
            { filters: "ceiling(a, b, c)", expectedParamCount: 1 },
            { filters: "round(a, b, c)", expectedParamCount: 1 },

            // string functions
            { filters: "substringof(a)", expectedParamCount: 2 },
            { filters: "endswith(a)", expectedParamCount: 2 },
            { filters: "startswith(a)", expectedParamCount: 2 },
            { filters: "concat(a)", expectedParamCount: 2 },
            { filters: "tolower(a, b)", expectedParamCount: 1 },
            { filters: "toupper()", expectedParamCount: 1 },
            { filters: "length()", expectedParamCount: 1 },
            { filters: "trim(a, 5)", expectedParamCount: 1 },
            { filters: "indexof(a)", expectedParamCount: 2 },
            { filters: "replace(a)", expectedParamCount: 3 },
            { filters: "substring(a)", expectedParamCount: 3, expectedError: "Function 'substring' requires 2 or 3 parameters." },
            { filters: "concat()", expectedParamCount: 2 },

            // math functions
            { filters: "floor()", expectedParamCount: 1 },
            { filters: "ceiling()", expectedParamCount: 1 },
            { filters: "round()", expectedParamCount: 1 }
        ];

        for (var idx in testCases) {
            var testCase = testCases[idx];

            var formatter = new SqlFormatter('testapp', { idType: "number", binaryColumns: [] });
            var queryDescription = {
                table: 'foo',
                filters: testCase.filters
            };

            var expectedExceptionCaught = false;
            try {
                formatter.format(queryDescription);
            }
            catch (e) {
                expectedExceptionCaught = true;
                var expectedError;
                if (!testCase.expectedError) {
                    var parenIdx = testCase.filters.indexOf('(');
                    var functionName = testCase.filters.substr(0, parenIdx);
                    expectedError = "Function '" + functionName + "' requires " + testCase.expectedParamCount;
                    expectedError += (testCase.expectedParamCount > 1) ? " parameters." : " parameter.";
                }
                else {
                    expectedError = testCase.expectedError;
                }
                equal(e.message, expectedError);
            }
            equal(expectedExceptionCaught, true);
        }
    });

    function verifySqlFormatting(queryDescription, expectedSql) {
        var formatter = new SqlFormatter('testapp', { idType: "number", binaryColumns: [] });
        formatter.format(queryDescription);
        equal(formatter.sql, expectedSql);

        return formatter;
    }
})
